#bot
import telebot
from telebot import types
from string import Template
from background import keep_alive  #–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

#basic
import pandas as pd
import re


df = pd.read_csv('bufer.csv')

token = 'TOKEN'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = telebot.TeleBot(token)


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start(message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  item1 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏")
  # item2 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ")
  # item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ")
  # item4 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–æ—Ü. —Å–µ—Ç—è–º")
  item5 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –≤–∏–¥—É —Ä–µ–∫–ª–∞–º—ã")
  # item6 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É")
  # item7 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞ –≤ –±–æ—Ç–∞")
  markup.add(item1)
  # markup.add(item2)
  # markup.add(item3)
  # markup.add(item4)
  markup.add(item5)
  # markup.add(item6)
  # markup.add(item7)
  img = open('blog-articles.png', 'rb')  # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ñ–æ—Ç–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  bot.send_photo(
      message.chat.id,
      img,
      "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {0.first_name}! \n\n–Ø - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤.\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –≤ —Ä–µ–∂–∏–º–µ –ë–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ - 30.10.2023. \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:"
      .format(message.from_user),
      reply_markup=markup)


@bot.message_handler(
    func=lambda message: message.text == "–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏")
def find_blogger_by_name(message):

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  item = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  markup.add(item)

  bot.send_message(
      message.chat.id,
      "{0.first_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
      .format(message.from_user),
      reply_markup=markup)

  bot.register_next_step_handler(message, search_blogger)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–ª–æ–≥–µ—Ä–∞
current_blogger_name = None


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–∞ –≤ DataFrame
def search_blogger(message):
  global current_blogger_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)

  else:
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    blogger_name = message.text.lower()
    current_blogger_name = message

    # –ò—â–µ–º –±–ª–æ–≥–µ—Ä–∞ –≤ DataFrame
    filtered_df = df[df['–±–ª–æ–≥–µ—Ä'].str.contains(blogger_name, na=False)]

    if not filtered_df.empty:
      first_words = []

      columns_to_exclude = [column for column in filtered_df.columns if column.startswith("Unnamed:")]
      filtered_df = filtered_df.drop(columns=columns_to_exclude)
      
      for index, row in filtered_df.iterrows():
        if not pd.isna(row).all():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞ (–Ω–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN)
            for column in filtered_df.columns:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è NaN
                if not pd.isna(row[column]):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    if not any(word in column.lower() for word in ["—Ç–µ–º–∞—Ç–∏–∫–∞", "–Ω–∞–ª–æ–≥", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "–±–ª–æ–≥–µ—Ä"]):
                        words = column.split()
                        for word in words:
                            if word.lower() == "vk":
                                first_words.append(" ".join(words[:2]))
                                break  # –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ "VK" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        else:
                            first_words.append(words[0])

      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      unique_first_words = list(set(first_words))


      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      for item in unique_first_words:
        button = types.KeyboardButton(item)
        markup.add(button)
      item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      markup.add(item555)
      # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      # item1 = types.KeyboardButton("Telegram")
      # item2 = types.KeyboardButton("Instagram")

      # item3 = types.KeyboardButton("–ì—Ä—É–ø–ø—ã –≤ VK")
      # item4 = types.KeyboardButton("–õ–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ VK")
      # item5 = types.KeyboardButton("VK –í–∏–¥–µ–æ")

      # item6 = types.KeyboardButton("YouTube")
      # item7 = types.KeyboardButton("RuTube")

      # item8 = types.KeyboardButton("–î–∑–µ–Ω")
      # item9 = types.KeyboardButton("–î–∑–µ–Ω –®–æ—É")

      # item10 = types.KeyboardButton("–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏")
      # item11 = types.KeyboardButton("OK –®–æ—É")

      # item12 = types.KeyboardButton("Twitch")

      # item13 = types.KeyboardButton("TikTok")

      # item14 = types.KeyboardButton("Threads")
      # item15 = types.KeyboardButton("Likee")
      # item16 = types.KeyboardButton("Yappy")

      # item17 = types.KeyboardButton("–ü–æ–¥–∫–∞—Å—Ç—ã")
      # item18 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

      # markup.add(item1, item2)
      # markup.add(item3, item4, item5)
      # markup.add(item6)
      # markup.add(item7)
      # markup.add(item8, item9)
      # markup.add(item10, item11)
      # markup.add(item12)
      # markup.add(item13)
      # markup.add(item14, item15, item16)
      # markup.add(item17)
      # markup.add(item18)

      bot.send_message(
          message.chat.id,
          "–ë–ª–æ–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º '{}' –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:"
          .format(blogger_name),
          reply_markup=markup)

    bot.register_next_step_handler(
        message, partial(filter_data_by_social_network,
                         filtered_df=filtered_df))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
def filter_data_by_social_network(message, filtered_df):
  social_network = message.text

  # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
  mask = filtered_df.columns.str.contains(social_network, na=False, case=False)

  filtered_df_socnet = filtered_df.loc[:, mask]

  filtered_df_socnet = filtered_df_socnet.rename(
      columns=lambda x: x.replace(f'{social_network} ', ''))

  filtered_df_socnet = filtered_df_socnet.apply(
      lambda x: x.map(lambda x: np.nan if x is None else x))

  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
  keyboard_data_social_network = types.ReplyKeyboardMarkup(
      one_time_keyboard=True)
  item1 = types.KeyboardButton('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏ –±–ª–æ–≥–µ—Ä–∞')
  item2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
  keyboard_data_social_network.add(item1)
  keyboard_data_social_network.add(item2)

  result_message = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º result_message

  for index, row in filtered_df_socnet.iterrows():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
    if not row.isnull().all():
      #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      result_message = "üñ§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ {}:\n\n".format(
          social_network)
      # result_message = "üñ§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ :\n\n"

      # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
      result_message += "<b>–ò–º—è –±–ª–æ–≥–µ—Ä–∞</b>: {}\n".format(row['–±–ª–æ–≥–µ—Ä'])
          # row['–±–ª–æ–≥–µ—Ä'].title())

      # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
      for column, value in row.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è NaN –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É '—Ç–µ–º–∞—Ç–∏–∫–∞'
        if not pd.isna(value) and column != '—Ç–µ–º–∞—Ç–∏–∫–∞' and column != '–±–ª–æ–≥–µ—Ä' and column != '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
          # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–∞ –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π
          if isinstance(value, (int, float)):
              formatted_value = '{:,.0f}'.format(value).replace(',', ' ')
              result_message += "<b>{}</b>: {}\n".format(column.capitalize(), formatted_value)
          else:
              result_message += "<b>{}</b>: {}\n".format(column.capitalize(), value)
          # result_message += "<b>{}</b>: {}\n".format(column.capitalize(),
          #                                            value)

      # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
      if '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in row:
        if not pd.isna(row['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']):
          result_message += "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {}\n".format(row['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
      # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      # result_message += "<b>\n\n‚úÇÔ∏èüíµ –ù–∞–ª–æ–≥</b>: {}\n".format(row['–Ω–∞–ª–æ–≥'])
      # result_message += "<b>‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>: {}\n".format(row['–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞'])

      max_message_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
      result_message += "\n\n"
      for i in range(0, len(result_message), max_message_length):
        bot.send_message(message.chat.id,
                         result_message[i:i + max_message_length],
                         parse_mode='HTML',
                         reply_markup=keyboard_data_social_network)

  result_message = ""
  tax_value = filtered_df.get('–Ω–∞–ª–æ–≥')
  # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –Ω–µ —Ä–∞–≤–Ω–∞ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ)
  if tax_value is not None and not tax_value.empty:
    tax_value = tax_value.values[0]
    result_message += "<b>‚úÇÔ∏èüíµ –ù–∞–ª–æ–≥</b>: {}\n".format(tax_value)

  manager_contacts = filtered_df.get('–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
  # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –Ω–µ —Ä–∞–≤–Ω–∞ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ)
  if manager_contacts is not None and not manager_contacts.empty:
    if len(manager_contacts.values) > 1:
      manager_contacts = manager_contacts.values[1]
    else:
      manager_contacts = manager_contacts.values[0]
    result_message += "<b>‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>: {}\n".format(
        manager_contacts)

  bot.send_message(
      message.chat.id,
      result_message,
      parse_mode='HTML',
  )

  bot.register_next_step_handler(message, fork_of_functions)


def fork_of_functions(message):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  elif message.text.lower() == "–Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏ –±–ª–æ–≥–µ—Ä–∞":
    try_other_social_networks(message)
  else:
    bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞üëÄ. –ù–∞–∂–º–∏—Ç–µ /return")


@bot.message_handler(func=lambda message: message.text.lower() ==
                     "–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏ –±–ª–æ–≥–µ—Ä–∞")
def try_other_social_networks(message):
  global current_blogger_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

  if current_blogger_name is not None:
    search_blogger(
        current_blogger_name)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é return_to_main_menu
  else:
    bot.send_message(message.chat.id, "–ò–º—è –±–ª–æ–≥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.message_handler(
    func=lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –≤–∏–¥—É —Ä–µ–∫–ª–∞–º—ã")
def find_blogger_by_social_media(message):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("Telegram")
    item2 = types.KeyboardButton("Instagram")

    item3 = types.KeyboardButton("–ì—Ä—É–ø–ø—ã –≤ VK")
    item4 = types.KeyboardButton("–õ–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ VK")
    item5 = types.KeyboardButton("VK –í–∏–¥–µ–æ")

    item6 = types.KeyboardButton("YouTube")
    item7 = types.KeyboardButton("RuTube")

    item8 = types.KeyboardButton("–î–∑–µ–Ω")
    item9 = types.KeyboardButton("–î–∑–µ–Ω –®–æ—É")

    item10 = types.KeyboardButton("–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏")
    item11 = types.KeyboardButton("OK –®–æ—É")

    item12 = types.KeyboardButton("Twitch")

    item13 = types.KeyboardButton("TikTok")

    item14 = types.KeyboardButton("Threads")
    item15 = types.KeyboardButton("Likee")
    item16 = types.KeyboardButton("Yappy")

    item17 = types.KeyboardButton("–ü–æ–¥–∫–∞—Å—Ç—ã")
    item18 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1, item2)
    markup.add(item3, item4, item5)
    markup.add(item6)
    markup.add(item7)
    markup.add(item8, item9)
    markup.add(item10, item11)
    markup.add(item12)
    markup.add(item13)
    markup.add(item14, item15, item16)
    markup.add(item17)
    markup.add(item18)

  bot.send_message(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ",
      reply_markup=markup)

  bot.register_next_step_handler(message, find_blogger_by_social_media_next)


def find_blogger_by_social_media_next(message):
  social_media = message.text
  df_social_media = df.filter(like=social_media, axis=1)
  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "—Å—Ç–æ–∏–º–æ—Å—Ç—å"
  df_social_media = df_social_media.filter(like='—Å—Ç–æ–∏–º–æ—Å—Ç—å', axis=1)

  df_social_media = df_social_media.rename(
      columns=lambda x: x.replace(f'{social_media} ', ''))
  df_social_media.columns = df_social_media.columns.str.replace(
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞', '')
  df_social_media = df_social_media.loc[:, ~df_social_media.columns.str.
                                        contains('–æ—Ö–≤–∞—Ç', na=False)]
  col_names_social_media = list(df_social_media.columns)

  # –ß–µ—Ä–Ω–æ–≤–∏–∫
  # –ö–û–î –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ö–ù–û–ü–û–ö
  # col_names_social_media = [re.sub(r'\(.*\)', '', item) for item in col_names_social_media]
  # col_names_social_media = [item.replace('–¢–µ–ª–µ–≥—Ä–∞–º', '–¢–≥') for item in col_names_social_media]
  # col_names_social_media = [item.replace('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', '–ò–Ω—Å—Ç') for item in col_names_social_media]
  # col_names_social_media = [item[:18] + '...' if len(item) > 21 else item for item in col_names_social_media]

  # invalid_characters = ['@', '#', '$', '%', '&', '*', ' ']
  # cleaned_col_names = [re.sub('|'.join(map(re.escape, invalid_characters)), '', col_name) for col_name in col_names_social_media]

  # bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é{col_names_social_media}:")
  # # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–æ–ª–±—Ü–æ–≤
  # markup = types.InlineKeyboardMarkup(row_width=1)
  # for col_name in col_names_social_media:
  #     button = types.InlineKeyboardButton(col_name, callback_data=col_name)
  #     markup.add(button)

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  for item in col_names_social_media:
    button = types.KeyboardButton(item)
    markup.add(button)

  item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  markup.add(item555)

  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /return
@bot.message_handler(
    func=lambda message: message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@bot.message_handler(commands=["return"])
def return_to_main_menu(message):

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                     one_time_keyboard=True)
  item1 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏")
  # item2 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ")
  # item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ")
  # item4 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–æ—Ü. —Å–µ—Ç—è–º")
  item5 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –≤–∏–¥—É —Ä–µ–∫–ª–∞–º—ã")
  # item6 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É")
  # item7 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞ –≤ –±–æ—Ç–∞")
  markup.add(item1)
  # markup.add(item2)
  # markup.add(item3)
  # markup.add(item4)
  markup.add(item5)
  # markup.add(item6)
  # markup.add(item7)

  bot.send_message(message.chat.id,
                   "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ",
                   reply_markup=markup)


keep_alive()  #–∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
bot.polling(non_stop=True, interval=0)  #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
