#bot
import telebot
from telebot import types
from string import Template
from background import keep_alive  #–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

#basic
import pandas as pd
import re


df = pd.read_csv('bufer.csv')

token = 'TOKEN'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = telebot.TeleBot(token)


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start(message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  item1 = types.KeyboardButton('–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏')
  item2 = types.KeyboardButton('–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ')
  # item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ")
  # item4 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–æ—Ü. —Å–µ—Ç—è–º")
  item5 = types.KeyboardButton('–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –≤–∏–¥—É —Ä–µ–∫–ª–∞–º—ã')
  # item6 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É")
  # item7 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞ –≤ –±–æ—Ç–∞")
  markup.add(item1)
  markup.add(item2)
  # markup.add(item3)
  # markup.add(item4)
  markup.add(item5)
  # markup.add(item6)
  # markup.add(item7)
  img = open('blog-articles.png', 'rb')  # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ñ–æ—Ç–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  bot.send_photo(
      message.chat.id,
      img,
      "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {0.first_name}! \n\n–Ø - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤.\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –≤ —Ä–µ–∂–∏–º–µ –ë–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ - 30.10.2023. \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:"
      .format(message.from_user),
      reply_markup=markup)

###############################################################################
#################### –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏" ##########################
###############################################################################

@bot.message_handler(
    func=lambda message: message.text == "–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏")
def find_blogger_by_name(message):

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  item = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  markup.add(item)

  bot.send_message(
      message.chat.id,
      "{0.first_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
      .format(message.from_user),
      reply_markup=markup)

  bot.register_next_step_handler(message, search_blogger)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–ª–æ–≥–µ—Ä–∞
current_blogger_name = None

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–∞ –≤ DataFrame
def search_blogger(message=None, blogger_name_def=None):
  global current_blogger_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    blogger_name = message.text.lower()
    current_blogger_name = message
    # bot.send_message(message.chat.id, f'{blogger_name}')
    blogger_name = blogger_name.split("\n—Å—Ç–æ–∏–º–æ—Å—Ç—å:")[0]
    blogger_name = blogger_name.replace('–∏–º—è –±–ª–æ–≥–µ—Ä–∞: ', '')

    # –ò—â–µ–º –±–ª–æ–≥–µ—Ä–∞ –≤ DataFrame
    filtered_df = df[df['–±–ª–æ–≥–µ—Ä'].str.contains(blogger_name, na=False)]

    if not filtered_df.empty:
      first_words = []

      columns_to_exclude = [
          column for column in filtered_df.columns
          if column.startswith("Unnamed:")
      ]
      filtered_df = filtered_df.drop(columns=columns_to_exclude)

      for index, row in filtered_df.iterrows():
        if not pd.isna(row).all(
        ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞ (–Ω–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN)
          for column in filtered_df.columns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è NaN
            if not pd.isna(row[column]):
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
              if not any(
                  word in column.lower()
                  for word in ["—Ç–µ–º–∞—Ç–∏–∫–∞", "–Ω–∞–ª–æ–≥", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "–±–ª–æ–≥–µ—Ä"]):
                words = column.split()
                for word in words:
                  if word.lower() == "vk":
                    first_words.append(" ".join(words[:2]))
                    break  # –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ "VK" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                else:
                  first_words.append(words[0])

      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      unique_first_words = list(set(first_words))

      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      for item in unique_first_words:
        button = types.KeyboardButton(item)
        markup.add(button)
      item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      markup.add(item555)

      bot.send_message(
          message.chat.id,
          "–ë–ª–æ–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º '{}' –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:"
          .format(blogger_name),
          reply_markup=markup)

    else:
      # –ï—Å–ª–∏ –±–ª–æ–≥–µ—Ä–∞ –Ω–µ –Ω–∞—à–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      markup.add(item555)
      bot.send_message(
          message.chat.id,
          f"–ë–ª–æ–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º '{blogger_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
          reply_markup=markup)

    bot.register_next_step_handler(
        message, partial(filter_data_by_social_network,
                         filtered_df=filtered_df))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
def filter_data_by_social_network(message, filtered_df):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    social_network = message.text

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    mask = filtered_df.columns.str.contains(social_network,
                                            na=False,
                                            case=False)

    filtered_df_socnet = filtered_df.loc[:, mask]

    filtered_df_socnet = filtered_df_socnet.rename(
        columns=lambda x: x.replace(f'{social_network} ', ''))

    filtered_df_socnet = filtered_df_socnet.apply(
        lambda x: x.map(lambda x: np.nan if x is None else x))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard_data_social_network = types.ReplyKeyboardMarkup(
        one_time_keyboard=True)
    item1 = types.KeyboardButton('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏ –±–ª–æ–≥–µ—Ä–∞')
    item2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    keyboard_data_social_network.add(item1)
    keyboard_data_social_network.add(item2)

    result_message = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º result_message

    for index, row in filtered_df_socnet.iterrows():
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
      if not row.isnull().all():
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_message = "üñ§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ {}:\n\n".format(
            social_network)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        result_message += "<b>–ò–º—è –±–ª–æ–≥–µ—Ä–∞</b>: {}\n".format(str(row['–±–ª–æ–≥–µ—Ä']).title())
        # result_message += "<b>–ò–º—è –±–ª–æ–≥–µ—Ä–∞</b>: {}\n".format(
        #   row['–±–ª–æ–≥–µ—Ä'])
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        result_message += "\n<b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        for column, value in row.items():
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è NaN –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É '—Ç–µ–º–∞—Ç–∏–∫–∞' –∏–ª–∏ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
          # if not pd.isna(value) and column != '—Ç–µ–º–∞—Ç–∏–∫–∞' and column != '–±–ª–æ–≥–µ—Ä' and column != '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and column != '—Å—Ç–æ–∏–º–æ—Å—Ç—å':
          if not pd.isna(
              value
          ) and column != '—Ç–µ–º–∞—Ç–∏–∫–∞' and column != '–±–ª–æ–≥–µ—Ä' and column != '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and '—Å—Ç–æ–∏–º–æ—Å—Ç—å' not in column:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–∞ –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π
            if isinstance(value, (int, float)):
              formatted_value = '{:,.0f}'.format(value).replace(',', ' ')
              result_message += "  ‚ñ∂ <b>{}</b>: {}\n".format(
                  column.capitalize(), formatted_value)
            else:
              result_message += "  ‚ñ∂ <b>{}</b>: {}\n".format(
                  column.capitalize(), value)

        #   # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —Å–ª–æ–≤–æ–º "—Å—Ç–æ–∏–º–æ—Å—Ç—å"
        # result_message += "\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π:</b>\n"
        # for column, value in row.items():
        #   if '—Å—Ç–æ–∏–º–æ—Å—Ç—å' in column and not pd.isna(value):
        #     column_without_first_word = ' '.join(column.split()[1:])
        #     if isinstance(value, (int, float)):
        #       formatted_cost = '{:,.0f}'.format(value).replace(',', ' ')
        #       result_message += "  ‚ñ∂ <b>{}</b>: {} —Ä—É–±–ª–µ–π\n".format(
        #           column_without_first_word.capitalize(), formatted_cost)
        not_found_cost_column = True  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º

        result_message += "\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π:</b>\n"
        column_without_first_word = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        for column, value in row.items():
          if '—Å—Ç–æ–∏–º–æ—Å—Ç—å' in column:
            if not pd.isna(value):
              column_without_first_word = ' '.join(column.split()[1:])
              if isinstance(value, (int, float)):
                formatted_cost = '{:,.0f}'.format(value).replace(',', ' ')
                result_message += "  ‚ñ∂ <b>{}</b>: {} —Ä—É–±–ª–µ–π\n".format(
                    column_without_first_word.capitalize(), formatted_cost)
              not_found_cost_column = False  # –ù–∞—à–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —Å "—Å—Ç–æ–∏–º–æ—Å—Ç—å"

        if not_found_cost_column:
          result_message += "  ‚ñ∂ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –±–ª–æ–≥–µ—Ä–∞üëá\n"



        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
        for column, value in row.items():
          if '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in column and not pd.isna(row['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']):
            result_message += "\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {}\n".format(
                row['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])

        max_message_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        result_message += "\n\n"
        for i in range(0, len(result_message), max_message_length):
          bot.send_message(message.chat.id,
                           result_message[i:i + max_message_length],
                           parse_mode='HTML',
                           reply_markup=keyboard_data_social_network)

    result_message = ""
    tax_value = filtered_df.get('–Ω–∞–ª–æ–≥')
    # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –Ω–µ —Ä–∞–≤–Ω–∞ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ)
    if tax_value is not None and not tax_value.empty:
      tax_value = tax_value.values[0]
      result_message += "<b>‚úÇÔ∏èüíµ –ù–∞–ª–æ–≥</b>: {}\n".format(tax_value)

    manager_contacts = filtered_df.get('–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
    # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –Ω–µ —Ä–∞–≤–Ω–∞ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ)
    if manager_contacts is not None and not manager_contacts.empty:
      if len(manager_contacts.values) > 1:
        manager_contacts = manager_contacts.values[1]
      else:
        manager_contacts = manager_contacts.values[0]
      result_message += "<b>‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>: {}\n".format(
          manager_contacts)

    bot.send_message(
        message.chat.id,
        result_message,
        parse_mode='HTML',
    )

  bot.register_next_step_handler(message, fork_of_functions)


def fork_of_functions(message):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  elif message.text.lower() == "–Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏ –±–ª–æ–≥–µ—Ä–∞":
    try_other_social_networks(message)
  else:
    bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞üëÄ. –ù–∞–∂–º–∏—Ç–µ /return")


@bot.message_handler(func=lambda message: message.text.lower() ==
                     "–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏ –±–ª–æ–≥–µ—Ä–∞")
def try_other_social_networks(message):
  global current_blogger_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

  if current_blogger_name is not None:
    search_blogger(
        current_blogger_name)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é return_to_main_menu
  else:
    bot.send_message(message.chat.id, "–ò–º—è –±–ª–æ–≥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


###############################################################################
############# –ö–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –≤–∏–¥—É —Ä–µ–∫–ª–∞–º—ã" ####################
###############################################################################

@bot.message_handler(
    func=lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –≤–∏–¥—É —Ä–µ–∫–ª–∞–º—ã")
def find_blogger_by_social_media(message):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("Telegram")
    item2 = types.KeyboardButton("Instagram")

    item3 = types.KeyboardButton("–ì—Ä—É–ø–ø—ã –≤ VK")
    item4 = types.KeyboardButton("–õ–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ VK")
    item5 = types.KeyboardButton("VK –í–∏–¥–µ–æ")

    item6 = types.KeyboardButton("YouTube")
    item7 = types.KeyboardButton("RuTube")

    item8 = types.KeyboardButton("–î–∑–µ–Ω")
    item9 = types.KeyboardButton("–î–∑–µ–Ω –®–æ—É")

    item10 = types.KeyboardButton("–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏")
    item11 = types.KeyboardButton("OK –®–æ—É")

    item12 = types.KeyboardButton("Twitch")

    item13 = types.KeyboardButton("TikTok")

    item14 = types.KeyboardButton("Threads")
    item15 = types.KeyboardButton("Likee")
    item16 = types.KeyboardButton("Yappy")

    item17 = types.KeyboardButton("–ü–æ–¥–∫–∞—Å—Ç")
    item18 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1, item2)
    markup.add(item3, item4, item5)
    markup.add(item6)
    markup.add(item7)
    markup.add(item8, item9)
    markup.add(item10, item11)
    markup.add(item12)
    markup.add(item13)
    markup.add(item14, item15, item16)
    markup.add(item17)
    markup.add(item18)

  bot.send_message(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ä–µ–∫–ª–∞–º–∞, —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ",
      reply_markup=markup)

  bot.register_next_step_handler(message, find_blogger_by_social_media_next)



def find_blogger_by_social_media_next(message):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    social_media = message.text
    if social_media == '–ì—Ä—É–ø–ø—ã –≤ VK':
      social_media = 'VK –≥—Ä—É–ø–ø–∞'
    elif social_media == '–õ–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ VK':
      social_media = 'VK –ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'

    df_social_media = df.filter(like=social_media, axis=1)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "—Å—Ç–æ–∏–º–æ—Å—Ç—å"
    # df_social_media = df_social_media.filter(like='—Å—Ç–æ–∏–º–æ—Å—Ç—å', axis=1)
    # df_social_media = df_social_media.loc[:, df_social_media.columns.str.contains('—Å—Ç–æ–∏–º–æ—Å—Ç—å|–±–ª–æ–≥–µ—Ä', case=False, na=False)]
    df_social_media = df_social_media.loc[:, df_social_media.columns.str.contains('—Å—Ç–æ–∏–º–æ—Å—Ç—å|–±–ª–æ–≥–µ—Ä', case=False, na=False) & ~df_social_media.columns.str.contains('–æ—Ö–≤–∞—Ç', case=False, na=False)]


    df_social_media = df_social_media.rename(
        columns=lambda x: x.replace(f'{social_media} ', ''))
    df_social_media.columns = df_social_media.columns.str.replace(
        '—Å—Ç–æ–∏–º–æ—Å—Ç—å ', '')

    df_social_media.columns = df_social_media.columns.str.capitalize()
    df_social_media = df_social_media.loc[:, ~df_social_media.columns.str.
                                          contains('–æ—Ö–≤–∞—Ç', na=False)]
    col_names_social_media = list(df_social_media.columns)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item in col_names_social_media:
      if item.lower() != '–±–ª–æ–≥–µ—Ä':
        button = types.KeyboardButton(item)
        markup.add(button)

    item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item555)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

    bot.register_next_step_handler(
        message,
        partial(find_blogger_by_social_media_2_next,
                df_social_media=df_social_media))

def find_blogger_by_social_media_2_next(message, df_social_media):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    position_social_media = message.text

    filtered_df_socnet_position = df_social_media[['–ë–ª–æ–≥–µ—Ä', position_social_media]]

    row_counts = filtered_df_socnet_position[position_social_media].count()
    total_rows = row_counts.sum()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–î–∞")
    item2 = types.KeyboardButton("–ù–µ—Ç, –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö")
    item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item555)
    bot.send_message(
        message.chat.id,
        f"–ù–∞–π–¥–µ–Ω–æ <b>{total_rows}</b> –≤–∞—Ä–∏–Ω—Ç–æ–≤.\n\n–•–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ —Ü–µ–Ω–µ?",
        parse_mode='HTML',
        reply_markup=markup)

    # bot.register_next_step_handler(message, fork_of_functions_position)

    bot.register_next_step_handler(
      message,
      partial(fork_of_functions_position,
              filtered_df_socnet_position=filtered_df_socnet_position,
             position_social_media=position_social_media))


def fork_of_functions_position(message, filtered_df_socnet_position, position_social_media):
  if message.text.lower() == "–¥–∞":
    find_blogger_by_social_media_price(message, filtered_df_socnet_position, position_social_media)
  elif message.text.lower() == "–Ω–µ—Ç, –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö":
    find_blogger_by_social_media_all(message, filtered_df_socnet_position, position_social_media)
  elif message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞üëÄ. –ù–∞–∂–º–∏—Ç–µ /return")


def find_blogger_by_social_media_price(message, filtered_df_socnet_position, position_social_media):

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  markup.add(item555)
  bot.send_message(
      message.chat.id,
      "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –±–µ–∑ –Ω—É–ª–µ–π –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü—Ä–∏–º–µ—Ä: 1000000",
      reply_markup=markup)

  bot.register_next_step_handler(
    message,
    partial(find_blogger_by_social_media_price_2,
            filtered_df_socnet_position=filtered_df_socnet_position,
            position_social_media=position_social_media))



def find_blogger_by_social_media_price_2(message, filtered_df_socnet_position, position_social_media):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    return_to_main_menu(message)
  else:
    price = float(message.text)
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤, —á—å–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã 'price'
    mask = (filtered_df_socnet_position['–ë–ª–æ–≥–µ—Ä'].notna()) & (filtered_df_socnet_position[position_social_media] <= price)
    filtered_df_socnet_position_price = filtered_df_socnet_position[mask].copy()



    # 'filtered_df' —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é

    # row_counts = filtered_df_socnet_position_price.count()
    # total_rows = row_counts.sum()
    total_rows = mask.sum()
    bot.send_message(message.chat.id,
                     f"–ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–Ω—Ç–æ–≤: <b>{total_rows}</b>.",
                     parse_mode='HTML')


    for _, row in filtered_df_socnet_position_price.iterrows():
        result_message = ""
#        blogger = row['–ë–ª–æ–≥–µ—Ä'].title()
        blogger = row['–ë–ª–æ–≥–µ—Ä']

        price = row[position_social_media]

        if not pd.isna(price):
          # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞
            keyboard = types.InlineKeyboardMarkup()
            result_message += "<b>–ò–º—è –±–ª–æ–≥–µ—Ä–∞</b>: {}\n".format(str(blogger).title())
            price = '{:,.0f}'.format(price).replace(',', ' ')
            result_message += "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {} —Ä—É–±–ª–µ–π\n\n".format(price)

            blogger_name_def = blogger
            blogger_name_def = re.sub('<.*?>', '', blogger_name_def)
            button1_callback_data = f"more_{blogger_name_def}"
            # button2_callback_data = "more_info_"  # –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏

            button1 = types.InlineKeyboardButton(text="–ë–æ–ª—å—à–µ –æ –±–ª–æ–≥–µ—Ä–µ", callback_data=button1_callback_data)
            # button2 = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data=button2_callback_data)
            # keyboard.add(button1, button2)
            keyboard.add(button1)


            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(message.chat.id, result_message, parse_mode='HTML', reply_markup=keyboard)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π —Å–Ω–∏–∑—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item555)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∏–∑—É
    bot.send_message(message.chat.id, '\n–ü–æ –∫–∞–∂–¥–æ–º—É –±–ª–æ–≥–µ—Ä—É –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n', reply_markup=markup)
    bot.send_message(message.chat.id,f'{blogger}', reply_markup=markup)


def find_blogger_by_social_media_all(message, filtered_df_socnet_position, position_social_media):
  for _, row in filtered_df_socnet_position.iterrows():
      blogger = row['–ë–ª–æ–≥–µ—Ä']
      price = row[position_social_media]

      if not pd.isna(price):
          keyboard = types.InlineKeyboardMarkup()
          result_message = "<b>–ò–º—è –±–ª–æ–≥–µ—Ä–∞</b>: {}\n".format(str(blogger).title())
          price = '{:,.0f}'.format(price).replace(',', ' ')
          result_message += "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {} —Ä—É–±–ª–µ–π\n\n".format(price)

          # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          # keyboard.add(types.InlineKeyboardButton(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="more_info_{}".format(blogger)))
          # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

          blogger_name_def = blogger
          blogger_name_def = re.sub('<.*?>', '', blogger_name_def)
          button1_callback_data = f"more_{blogger_name_def}"
          # button2_callback_data = "more_info_{}"
        # –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
          button1 = types.InlineKeyboardButton(text="–ë–æ–ª—å—à–µ –æ –±–ª–æ–≥–µ—Ä–µ", callback_data=button1_callback_data)
          # button2 = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data=button2_callback_data)
          # keyboard.add(button1, button2)

          keyboard.add(button1)

          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
          bot.send_message(message.chat.id, result_message, parse_mode='HTML', reply_markup=keyboard)

  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π —Å–Ω–∏–∑—É
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  item555 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  markup.add(item555)

  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∏–∑—É
  bot.send_message(message.chat.id, '\n–ü–æ –∫–∞–∂–¥–æ–º—É –±–ª–æ–≥–µ—Ä—É –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n', reply_markup=markup)


###############################################################################
################### –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ" ##########################
###############################################################################

@bot.message_handler(func=lambda message: message.text == '–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ')
def find_blogger_by_href(message):

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  item = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  markup.add(item)

  bot.send_message(
      message.chat.id,
      "{0.first_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–≥–µ—Ä–∞.\n\n–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–∫–∞—Ç—å Youtube-–±–ª–æ–≥–µ—Ä–æ–≤, —Ç–∞–∫ –∫–∞–∫ —É –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –±–ª–æ–≥–µ—Ä–∞.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.".format(message.from_user), reply_markup=markup)

  bot.register_next_step_handler(message, find_blogger_by_href_with_href)


def find_blogger_by_href_with_href(message):
  if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
      return_to_main_menu(message)
  else:
      # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      blogger_href = message.text.lower()

      # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π blogger_href:", blogger_href)

      # –ò—â–µ–º blogger_href –≤–æ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Å–ª–æ–≤–æ "—Å—Å—ã–ª–∫–∞"
      keyword = '—Å—Å—ã–ª–∫–∞'
      columns_with_link = [col for col in df.columns if keyword in col.lower()]

      filtered_df_href_sample = df[df[columns_with_link].apply(lambda col: col.astype(str).str.contains(blogger_href, case=False, na=False)).any(axis=1)]

      filtered_df_href = df[df.apply(lambda col: col.astype(str).str.contains(blogger_href, case=False, na=False)).any(axis=1)]

      social_network = ['Telegram', 'Instagram', 'VK –≥—Ä—É–ø–ø–∞', 'VK –ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', 'VK –í–∏–¥–µ–æ', 'YouTube', 'RuTube', '–î–∑–µ–Ω', '–î–∑–µ–Ω –®–æ—É', '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', 'OK –®–æ—É', 'Twitch', 'TikTok', 'Threads', 'Likee', 'Yappy', '–ü–æ–¥–∫–∞—Å—Ç']
  
      found_networks = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

      for network in social_network:
        if network.lower() in blogger_href:
            found_networks.append(network)

      relevant_columns = [col for col in filtered_df_href.columns if any(network in col for network in found_networks) or col.strip().lower() == '–±–ª–æ–≥–µ—Ä' or col.strip().lower() == '–Ω–∞–ª–æ–≥' or col.strip().lower() == '–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞']
 

      if relevant_columns:
        filtered_df_href = filtered_df_href[relevant_columns]

      for network in found_networks:
        filtered_df_href = filtered_df_href.rename(columns=lambda x: x.replace(f'{network} ', ''))

      filtered_df_href.columns = [col.lower() for col in filtered_df_href.columns]


    
      if not filtered_df_href_sample.empty:
          markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
          item = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
          markup.add(item)

          bot.send_message(message.chat.id,
              "–ú—ã –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∏–∂–µüëá",
              reply_markup=markup)

          keyboard_data_social_network = types.ReplyKeyboardMarkup(
              one_time_keyboard=True)
          # item1 = types.KeyboardButton('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏ –±–ª–æ–≥–µ—Ä–∞')
          item2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
          # keyboard_data_social_network.add(item1)
          keyboard_data_social_network.add(item2)

          result_message = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º result_message

          for index, row in filtered_df_href.iterrows():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
            if not row.isnull().all():              
              # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
              result_message += "<b>–ò–º—è –±–ª–æ–≥–µ—Ä–∞</b>: {}\n".format(str(row['–±–ª–æ–≥–µ—Ä']).title())
              # result_message += "<b>–ò–º—è –±–ª–æ–≥–µ—Ä–∞</b>: {}\n".format(
              #   row['–±–ª–æ–≥–µ—Ä'])
              # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
              result_message += "\n<b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"

              excluded_keywords = ['–±–ª–æ–≥–µ—Ä', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–Ω–∞–ª–æ–≥', '–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞']
              for column, value in row.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è NaN –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É '—Ç–µ–º–∞—Ç–∏–∫–∞' –∏–ª–∏ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
                if not pd.isna(value) and not all(keyword in column for keyword in excluded_keywords):

                # if not pd.isna(value) and column not in ['—Ç–µ–º–∞—Ç–∏–∫–∞', '–±–ª–æ–≥–µ—Ä', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–Ω–∞–ª–æ–≥'] and '–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞' not in column:
                  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–∞ –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π
                  if isinstance(value, (int, float)):
                    formatted_value = '{:,.0f}'.format(value).replace(',', ' ')
                    result_message += "  ‚ñ∂ <b>{}</b>: {}\n".format(
                        column.capitalize(), formatted_value)
                  else:
                    result_message += "  ‚ñ∂ <b>{}</b>: {}\n".format(
                        column.capitalize(), value)

              not_found_cost_column = True  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º

              result_message += "\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π:</b>\n"
              column_without_first_word = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
              for column, value in row.items():
                if '—Å—Ç–æ–∏–º–æ—Å—Ç—å' in column:
                  if not pd.isna(value):
                    column_without_first_word = ' '.join(column.split()[1:])
                    if isinstance(value, (int, float)):
                      formatted_cost = '{:,.0f}'.format(value).replace(',', ' ')
                      result_message += "  ‚ñ∂ <b>{}</b>: {} —Ä—É–±–ª–µ–π\n".format(
                          column_without_first_word.capitalize(), formatted_cost)
                    not_found_cost_column = False  # –ù–∞—à–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —Å "—Å—Ç–æ–∏–º–æ—Å—Ç—å"

              if not_found_cost_column:
                result_message += "  ‚ñ∂ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –±–ª–æ–≥–µ—Ä–∞üëá\n"

              # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
              # for column, value in row.items():
              #   if '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in column and not pd.isna(row['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']):
              #     result_message += "\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {}\n".format(
              #         row['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
              #   else:
              #     result_message += "\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"


              max_message_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
              result_message += "\n\n"
              for i in range(0, len(result_message), max_message_length):
                bot.send_message(message.chat.id,
                                 result_message[i:i + max_message_length],
                                 parse_mode='HTML',
                                 reply_markup=keyboard_data_social_network)

          result_message = ""
          tax_value = filtered_df_href.get('–Ω–∞–ª–æ–≥')
          # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –Ω–µ —Ä–∞–≤–Ω–∞ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ)
          if tax_value is not None and not tax_value.empty:
            tax_value = tax_value.values[0]
            result_message += "<b>‚úÇÔ∏èüíµ –ù–∞–ª–æ–≥</b>: {}\n".format(tax_value)

          manager_contacts = filtered_df_href.get('–∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
          # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –Ω–µ —Ä–∞–≤–Ω–∞ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ)
          if manager_contacts is not None and not manager_contacts.empty:
            if len(manager_contacts.values) > 1:
              manager_contacts = manager_contacts.values[1]
            else:
              manager_contacts = manager_contacts.values[0]
            result_message += "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>: {}\n".format(
                manager_contacts)

          bot.send_message(
              message.chat.id,
              result_message,
              parse_mode='HTML',
          )

      else:
          markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
          # item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É")
          item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
          # markup.add(item1)
          markup.add(item2)
          bot.send_message(
              message.chat.id,
              "{0.first_name}, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É'. \n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.".format(message.from_user), reply_markup=markup)






###############################################################################
####################### –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ #############################
###############################################################################

@bot.callback_query_handler(func=lambda call: call.data.startswith('more_'))
def handle_more_button(call):
    message = call.message
    search_blogger(message)



###############################################################################
###################### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /return #############################
###############################################################################

@bot.message_handler(
    func=lambda message: message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@bot.message_handler(commands=["return"])
def return_to_main_menu(message):

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                     one_time_keyboard=True)
  item1 = types.KeyboardButton('–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏')
  item2 = types.KeyboardButton('–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ')
  # item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ")
  # item4 = types.KeyboardButton("–ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–æ—Ü. —Å–µ—Ç—è–º")
  item5 = types.KeyboardButton('–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –≤–∏–¥—É —Ä–µ–∫–ª–∞–º—ã')
  # item6 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É")
  # item7 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞ –≤ –±–æ—Ç–∞")
  markup.add(item1)
  markup.add(item2)
  # markup.add(item3)
  # markup.add(item4)
  markup.add(item5)
  # markup.add(item6)
  # markup.add(item7)

  bot.send_message(message.chat.id,
                   "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ",
                   reply_markup=markup)


keep_alive()  #–∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
bot.polling(non_stop=True, interval=0)  #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
